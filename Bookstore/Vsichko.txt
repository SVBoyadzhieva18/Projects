public class Book {
    private int invNumber;
    private String author;
    private String title;
    private double price;

    public Book(){
        this.invNumber=1;
        this.author="Chris";
        this.title="Otpred";
        this.price=19.99;
    }

    public Book(int invNumber, String author, String title, double price) {
        this.invNumber = invNumber;
        this.author = author;
        this.title = title;
        this.price = price;
    }

    public int getInvNumber() {
        return invNumber;
    }

    public void setInvNumber(int invNumber) {
        this.invNumber = invNumber;
    }

    public String getAuthor() {
        return author;
    }

    public void setAuthor(String author) {
        this.author = author;
    }

    public String getTitle() {
        return title;
    }

    public void setTitle(String title) {
        this.title = title;
    }

    public double getPrice() {
        return price;
    }

    public void setPrice(double price) {
        this.price = price;
    }

    public void displayInfo(){
        System.out.println();
        System.out.println("Inv Numver: "+invNumber+"\nAuthor: "+author+"\nTitle: "+title+"\nPrice: "+price);
        System.out.println();
    }
}













import java.util.ArrayList;
import java.util.Date;
import java.util.List;

public class LendingRegistry {
    private List<Book> books;
    private List<Reader> readers;
    private List<Date> returnDates;

    public LendingRegistry() {
        books = new ArrayList<>();
        readers = new ArrayList<>();
        returnDates = new ArrayList<>();
    }

    public void addBookToReader(Book book, Reader reader, Date returnDate) {
        books.add(book);
        readers.add(reader);
        returnDates.add(returnDate);
    }

    public void displayAllData() {
        for (int i = 0; i < books.size(); i++) {
            System.out.println("Book Information:");
            books.get(i).displayInfo();
            System.out.println("Reader Information:");
            readers.get(i).displayInfo();
            System.out.println("Return Date: " + returnDates.get(i));
            System.out.println("--------------------");
        }
    }

    public void removeReturnedBook(int index) {
        books.remove(index);
        readers.remove(index);
        returnDates.remove(index);
    }

    public void displayLateReaders() {
        Date currentDate = new Date();
        for (int i = 0; i < returnDates.size(); i++) {
            if (returnDates.get(i).before(currentDate)) {
                System.out.println("Late Reader Information:");
                readers.get(i).displayInfo();
                System.out.println("Return Date: " + returnDates.get(i));
                System.out.println("--------------------");
            }
        }
    }

    public void displayLateBooks() {
        Date currentDate = new Date();
        for (int i = 0; i < returnDates.size(); i++) {
            if (returnDates.get(i).before(currentDate)) {
                System.out.println("Late Book Information:");
                books.get(i).displayInfo();
                System.out.println("Return Date: " + returnDates.get(i));
                System.out.println("--------------------");
            }
        }
    }

    public void displayBooksByAuthor(String author) {
        for (int i = 0; i < books.size(); i++) {
            if (books.get(i).getAuthor().equalsIgnoreCase(author)) {
                System.out.println("Book Information:");
                books.get(i).displayInfo();
                System.out.println("Reader Information:");
                readers.get(i).displayInfo();
                System.out.println("Return Date: " + returnDates.get(i));
                System.out.println("--------------------");
            }
        }
    }

    public void displayReadersByDate(Date date) {
        for (int i = 0; i < returnDates.size(); i++) {
            if (returnDates.get(i).equals(date)) {
                System.out.println("Reader Information:");
                readers.get(i).displayInfo();
                System.out.println("Return Date: " + returnDates.get(i));
                System.out.println("--------------------");
            }
        }
    }
}








import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.Date;
import java.util.Scanner;

public class Main {
    public static void main(String[] args) {
        LendingRegistry lendingRegistry = new LendingRegistry();
        Scanner scanner = new Scanner(System.in);

        while (true) {
            System.out.println("Menu:");
            System.out.println("1. Add book to reader");
            System.out.println("2. Display all data");
            System.out.println("3. Remove returned book");
            System.out.println("4. Display late readers");
            System.out.println("5. Display late books");
            System.out.println("6. Display books by author");
            System.out.println("7. Display readers by date");
            System.out.println("0. Exit");

            int choice = scanner.nextInt();
            scanner.nextLine(); // consume the newline character

            switch (choice) {
                case 1:
                    System.out.println("Enter book details:");
                    System.out.print("Inventory Number: ");
                    int inventoryNumber = scanner.nextInt();
                    scanner.nextLine(); // consume the newline character
                    System.out.print("Author: ");
                    String author = scanner.nextLine();
                    System.out.print("Title: ");
                    String title = scanner.nextLine();
                    System.out.print("Price: ");
                    double price = scanner.nextDouble();
                    scanner.nextLine(); // consume the newline character

                    System.out.println("Enter reader details:");
                    System.out.print("Name: ");
                    String name = scanner.nextLine();
                    System.out.print("Address: ");
                    String address = scanner.nextLine();
                    System.out.print("EGN: ");
                    String egn = scanner.nextLine();

                    System.out.print("Enter return date: ");
                    // Assuming the date input format is "dd/MM/yyyy"
                    String returnDateStr = scanner.nextLine();
                    Date returnDate = parseDate(returnDateStr);
                    Book book = new Book(inventoryNumber, author, title, price);
                    Reader reader = new Reader(name, address, egn);
                    lendingRegistry.addBookToReader(book, reader, returnDate);
                    break;

                case 2:
                    lendingRegistry.displayAllData();
                    break;

                case 3:
                    System.out.print("Enter the index of the returned book: ");
                    int index = scanner.nextInt();
                    lendingRegistry.removeReturnedBook(index);
                    break;

                case 4:
                    lendingRegistry.displayLateReaders();
                    break;

                case 5:
                    lendingRegistry.displayLateBooks();
                    break;

                case 6:
                    System.out.print("Enter the author's name: ");
                    String authorName = scanner.nextLine();
                    lendingRegistry.displayBooksByAuthor(authorName);
                    break;

                case 7:
                    System.out.print("Enter the return date (dd/MM/yyyy): ");
                    String returnDateInput = scanner.nextLine();
                    Date returnDateFilter = parseDate(returnDateInput);
                    lendingRegistry.displayReadersByDate(returnDateFilter);
                    break;

                case 0:
                    System.out.println("Exiting the program...");
                    scanner.close();
                    System.exit(0);

                default:
                    System.out.println("Invalid choice. Please try again.");
            }
        }
    }

    private static Date parseDate(String dateStr) {
        SimpleDateFormat dateFormat = new SimpleDateFormat("dd/MM/yyyy");
        try {
            Date date = dateFormat.parse(dateStr);
            return date;
        } catch (ParseException e) {
            e.printStackTrace();
            return null;
        }
    }
}









public class Reader {
    private String name;
    private String address;
    private String egn;

    public Reader(){
        this.name="";
        this.address="";
        this.egn="";
    }

    public Reader(String name, String address, String egn) {
        this.name = name;
        this.address = address;
        this.egn = egn;
    }

    public String getName() {
        return name;
    }

    public void setName(String name) {
        this.name = name;
    }

    public String getAddress() {
        return address;
    }

    public void setAddress(String address) {
        this.address = address;
    }

    public String getEgn() {
        return egn;
    }

    public void setEgn(String egn) {
        this.egn = egn;
    }

    public void displayInfo(){
        System.out.println();
        System.out.println("Name: "+name+"\nAddress: "+address+"\nEGN: "+egn);
        System.out.println();
    }
}